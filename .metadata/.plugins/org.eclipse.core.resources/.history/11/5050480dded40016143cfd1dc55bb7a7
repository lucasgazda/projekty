
import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import java.util.stream.Collectors;

public class Data {
	
	private Map<String,	String> mapWord = new HashMap<>();

	public Map<String, String> getMapaNapis() {
		return mapWord;
	}

	public void setMapaWord(Map<String, String> mapWord) {
		this.mapWord = mapWord;
	}
	
	public Data() {
		
	}

	public Data(Set<String> listFile) {
		for(String s: listFile)
		{
			String prefix = "G:\\Programowanie\\Git\\UserFiles\\";
			String suffix = ".txt";
			String fileName = prefix + "data" + suffix;
			File file = new File(fileName);
			
			try(Scanner sc = new Scanner(file))
			{
				String wordFile = "";
				while(sc.hasNextLine())
				{
					wordFile += sc.nextLine();
				}
				
				mapWord.put(s, wordFile);
				
			} catch (FileNotFoundException e1) {
				e1.printStackTrace();
			}
		}
	}
	
	@Override
		public String toString() {
			return mapWord.entrySet().stream().map(x -> x.getKey() + " " + x.getValue()).collect(Collectors.joining("\n"));
		}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((mapWord == null) ? 0 : mapWord.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Data other = (Data) obj;
		if (mapWord == null) {
			if (other.mapWord != null)
				return false;
		} else if (!mapWord.equals(other.mapWord))
			return false;
		return true;
	}
}

