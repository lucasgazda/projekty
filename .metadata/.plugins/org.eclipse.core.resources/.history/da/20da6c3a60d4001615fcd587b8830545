
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;

public class Borrow { 
	
	private Reader reader = new Reader();
	private Book k = new Book();
	private String date;
 
	public Reader getC() {
		return reader;
	}
	
	public void setC(Reader c) {
		this.reader = c;
	}
	
	public Book getK() {
		return k;
	}
	
	public void setK(Book k) {
		this.k = k;
	}

	public String getData() {
		return date;
	}

	public void setData(String data) {
		this.date = data;
	}
	
	public void obliczKara(Borrow w) {
		double wysokoscKary = 5.0;
		LocalDate ld = LocalDate.now();
		String dataWypozyczenia = w.getData();
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd-MM-yyyy");
		LocalDate ld1 = LocalDate.parse(dataWypozyczenia, dtf);
		long dniWypozyczenie = ChronoUnit.DAYS.between(ld, ld1);
		
		int dni = Math.abs((int)dniWypozyczenie);
		
		if(dni > 14) 
		{
			if(w.getC().getAge() > 18) 
			{
				w.getC().setPenaltyAmount(((dni-14) * wysokoscKary) + w.getC().getPenaltyAmount());
			}
			else
			{
				w.getC().setPenaltyAmount(((dni-14) * (wysokoscKary * 0.5)) + w.getC().getPenaltyAmount());
			}
		}
	}

	public Borrow() {
		
	}

	public Borrow(Reader c, Book k, String data) {
		this.reader = c;
		this.k = k;
		this.date = data;
	}
	
	@Override
	public String toString() {
		String text = "";
		text += "CZYTELNIK = " + reader + "\n";
		text += "KSIAZKA = " + k + "\n";
		text += "DATA = " + date + "\n";
		return text;
	} 

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((reader == null) ? 0 : reader.hashCode());
		result = prime * result + ((date == null) ? 0 : date.hashCode());
		result = prime * result + ((k == null) ? 0 : k.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Borrow other = (Borrow) obj;
		if (reader == null) {
			if (other.reader != null)
				return false;
		} else if (!reader.equals(other.reader))
			return false;
		if (date == null) {
			if (other.date != null)
				return false;
		} else if (!date.equals(other.date))
			return false;
		if (k == null) {
			if (other.k != null)
				return false;
		} else if (!k.equals(other.k))
			return false;
		return true;
	}
}
