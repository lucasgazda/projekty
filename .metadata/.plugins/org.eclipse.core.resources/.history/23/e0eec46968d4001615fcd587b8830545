
public class Device {

	private String deviceName;
	private int totalWorkingTime;
	private String deviceClass;
	private double deviceReparingPrice;
	
	
	public String getDeviceName() {
		return deviceName;
	}
	
	public void setDeviceName(String deviceName) {
		this.deviceName = deviceName;
	}
	
	public int getTotalWorkingTime() {
		return totalWorkingTime;
	}
	
	public void setSumarycznyCzasPracy(int sumarycznyCzasPracy) {
		if(0 <= sumarycznyCzasPracy && sumarycznyCzasPracy <= 120)
		{
			this.totalWorkingTime = sumarycznyCzasPracy;
		}
		else
		{
			System.out.println("Nieprawidlowy czas pracy");
			this.totalWorkingTime = 60;
		}
	}
	
	public String getKlasaUrzadznia() {
		return deviceClass;
	}
	
	public void setKlasaUrzadznia(String klasaUrzadznia) {
		if(klasaUrzadznia.matches("(A|B|C|D)"))
		{
			this.deviceClass = klasaUrzadznia;
		}
		else
		{
			System.out.println("Nieprawidlowa klasa urzadzenia");
			this.deviceClass = "A";
		}
	}
	
	public double getKosztNaprawyUrzadzenia() {
		return deviceReparingPrice;
	}
	
	public void setKosztNaprawyUrzadzenia(double kosztNaprawyUrzadzenia) {
		this.deviceReparingPrice = kosztNaprawyUrzadzenia;
	}

	public Device() {
		
	}

	public Device(String nazwaUrzadzenia, int sumarycznyCzasPracy, String klasaUrzadznia,
						double kosztNaprawyUrzadzenia) {
		this.deviceName = nazwaUrzadzenia;
		setSumarycznyCzasPracy(sumarycznyCzasPracy);
		setKlasaUrzadznia(klasaUrzadznia);
		this.deviceReparingPrice = kosztNaprawyUrzadzenia;
	}
	
	@Override
		public String toString() {
			String text = "";
			text += "\n" + "NAZWA URZADZENIA = " + getDeviceName() + "\n";
			text += "SUMARYCZNY CZAS PRACY = " + getTotalWorkingTime() + "\n";
			text += "KLASA URZADZENIA = " + getKlasaUrzadznia() + "\n";
			text += "KOSZT NAPRAWY URZADZENIA = " + getKosztNaprawyUrzadzenia() + "\n";
			return text;
		}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((deviceClass == null) ? 0 : deviceClass.hashCode());
		long temp;
		temp = Double.doubleToLongBits(deviceReparingPrice);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		result = prime * result + ((deviceName == null) ? 0 : deviceName.hashCode());
		result = prime * result + totalWorkingTime;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Device other = (Device) obj;
		if (deviceClass == null) {
			if (other.deviceClass != null)
				return false;
		} else if (!deviceClass.equals(other.deviceClass))
			return false;
		if (Double.doubleToLongBits(deviceReparingPrice) != Double.doubleToLongBits(other.deviceReparingPrice))
			return false;
		if (deviceName == null) {
			if (other.deviceName != null)
				return false;
		} else if (!deviceName.equals(other.deviceName))
			return false;
		if (totalWorkingTime != other.totalWorkingTime)
			return false;
		return true;
	}
	
}